syntax = 'proto3';

enum Command {
    CMD_STATUS = 0;
    CMD_CONFIG = 1;
    CMD_AUTOCALIBRATE = 2;
    CMD_START_SAMPLING = 3;
    CMD_STOP_SAMPLING = 4;
}

message ChannelConfig {
    uint32 samplerate = 1;
    uint32 channelmask = 2;
}

enum TriggerType {
    TRIGGER_LOW = 0;
    TRIGGER_HIGH = 1;
    TRIGGER_RISE = 2;
    TRIGGER_FALL = 3;
    TRIGGER_EDGE = 4;
}

message TriggerChannel {
    uint32 channel = 1;
    TriggerType type = 2;
}

message TriggerConfig {
    // Sigrok-style trigger matching, all trigger channels have to match.
    repeated TriggerChannel triggers = 1;
}

enum WaveType {
    WAVE_DC = 0;
    WAVE_SIN = 1;
    WAVE_RECTANGLE = 2;
    WAVE_TRIANGLE = 3;
}

enum SweepType {
    SWEEP_NONE = 0;
    SWEEP_LIN = 1;
    SWEEP_LOG = 2;
}

message WaveConfig {
    float hz = 1;
    float amplitude = 2;
    float offset = 3;
    float duty = 4; // For WAVE_RECTANGLE and WAVE_TRIANGLE only
}

message DACConfig {
    WaveType wave = 1;
    SweepType sweep = 2;
    float sweep_time = 3; // Sweep length in seconds
    WaveConfig start = 4; // Wave parameters at start of sweep
    WaveConfig end = 5; // Wave parameters at end of sweep (optional)
}

message Config {
    ChannelConfig digital = 16; // Digital inputs
    ChannelConfig analog1 = 17; // Voltage input 1
    ChannelConfig analog2 = 18; // Voltage input 2
    ChannelConfig analog3 = 19; // Current input
    ChannelConfig usb = 20; // USB protocol analyzer
    DACConfig dac1 = 21; // Analog output
}

message USBRequest {
    Command cmd = 1;
    Config cfg = 2;
}

enum Status {
    STATUS_UNKNOWN = 0;
    STATUS_IDLE = 1; // No measurement running
    STATUS_WAITTRIG = 2; // Waiting for trigger to occur
    STATUS_MEASURING = 3; // Measurement is running
    STATUS_STOPPING = 4; // Measurement has ended, sending rest of the data
    STATUS_ERROR = 5; // Unrecoverable error has occurred
}

enum ErrorCode {
    ERR_NONE = 0; // No error
    ERR_BUFFER_FULL = 1; // Buffers filled up during measurement
    ERR_VREF_OUT_OF_RANGE = 2; // Internal VREF+ out of range
    ERR_GND_REF_OUT_OF_RANGE = 3; // Virtual ground voltage out of range
}

enum ChannelId {
    CHANNEL_DIGITAL = 0;
    CHANNEL_ANALOG_V1 = 8;
    CHANNEL_ANALOG_V2 = 9;
    CHANNEL_ANALOG_I1 = 10;
    CHANNEL_USB = 16;
}

enum Compression {
    COMPRESSION_NONE = 0;
    COMPRESSION_SNAPPY = 1; // Google's "snappy" compression format, without framing
    COMPRESSION_DELTA = 2; // Analog value deltas stored as varints
}

enum Unit {
    UNIT_Volt = 0;
    UNIT_Ampere = 1;
}

message AnalogScale {
    float scale = 1; // Samples are multiplied by this value
    float offset = 2; // Offset is added after multiplication
    Unit unit = 3; // Unit of the measured value
}

message USBResponse {
    Status status = 1; // Current state of the device
    string statusmsg = 2; // Optional status message for user
    uint32 cpu_usage = 3; // Current CPU usage 0-100%
    
    // The fields below are present only when measurement is running.
    ChannelId channelidx = 8; // Identifies the channel the data is from
    uint32 samplerate = 9; // Actual samplerate of this channel
    int64 sampleidx = 10; // Running index of the first sample in this packet
    uint32 bits_per_sample = 11; // Number of uncompressed bits in each sample
    AnalogScale scaling = 12; // Scaling info, if this channel is analog
    Compression compression = 13; // Compression mode

    // Digital data, snappy-compressed.
    bytes data = 20;

    // Analog data, stored as varint deltas.
    // First value is the initial value, further are differences.
    repeated int32 deltas = 21;

    // Padding inserted to align messages
    bytes padding = 15;
}

message CalibrationValue {
    float value = 1; // Value at 25 celsius
    float tolerance = 2; // Tolerance in range 20 to 30 celsius, in same units as value.
    float tempco = 3; // First degree temperature coefficient, value += tempco * (T - 25)
    float tempco2 = 4; // Second degree temperature coefficient, value += tempco2 * (T - 25)**2
}

message AnalogChannelCalibration {
    CalibrationValue resistance = 1; // Input/output resistance (ohms)
    CalibrationValue offset = 2; // Offset compared to GNDREF (ADC volts)
    CalibrationValue scale = 3; // Scale from input volts to ADC volts
}

message CalibrationInfo {
    string calibrated_by = 1; // Company / person performing the calibration
    string date = 2; // In YYYY-MM-DD format
    bytes signature = 3; // Appended after the message, calculated over everything except the signature field

    AnalogChannelCalibration ai0_calibration = 8; // Voltage input 1
    AnalogChannelCalibration ai1_calibration = 9; // Voltage input 2
    AnalogChannelCalibration ai2_calibration = 10; // Current input
    AnalogChannelCalibration ai3_calibration = 11; // DAC current feedback
    AnalogChannelCalibration dac_calibration = 12; // DAC output voltage

    CalibrationValue usb_shunt = 13; // USB shunt (R26) resistance
    CalibrationValue vref = 14; // Vref voltage
    CalibrationValue tcxo = 15; // TCXO frequency
}
